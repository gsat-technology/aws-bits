Parameters:

  S3BucketName:
    Type: String
    Description: s3 bucket name (this will be created)


Resources:

  APIGateway:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Name:
          !Join [ "_", [ !Ref "AWS::StackName", APIG ] ]

  APIGDeploymentDemo:
    DependsOn:
      - ImageResourceMethodAny
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        !Ref APIGateway
      StageName: demo_deploy

  APIGImageResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        !GetAtt APIGateway.RootResourceId
      PathPart: image
      RestApiId: !Ref APIGateway

  ImageResourceMethodAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId:
        !Ref APIGImageResource
      RestApiId:
        !Ref APIGateway
      Integration:
        Credentials:
          !GetAtt APIGExecuteLambdaRole.Arn
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
          - Arn:
              Fn::GetAtt:
              - LambdaImageCRUD
              - Arn

  APIGExecuteLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource:
                  !GetAtt LambdaImageCRUD.Arn

  LambdaGlobalRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - s3:PutObject
                Resource:
                  !Join [ "", [ "arn:aws:s3:::", !Ref S3BucketName, "/*"  ] ]

  LambdaImageCRUD:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          ZipFile: |
            def handler(event, context):
              return None
        Description: CRUD for image resource
        FunctionName:
          !Join [ "_", [ !Ref "AWS::StackName", "imageCRUD" ] ]
        Handler: app.handler
        MemorySize: 128
        Role:
          !GetAtt LambdaGlobalRole.Arn
        Runtime: python2.7
        Timeout: 30
        Environment:
          Variables:
            s3_bucket: !Ref S3BucketName

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName:
        !Ref S3BucketName
